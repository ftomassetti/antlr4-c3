// Generated from test/SandyLexer.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { NotNull } from 'antlr4ts/Decorators';
import { Override } from 'antlr4ts/Decorators';
import { RuleContext } from 'antlr4ts/RuleContext';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

import * as Utils from 'antlr4ts/misc/Utils';


export class SandyLexer extends Lexer {
	public static readonly NEWLINE=1;
	public static readonly WS=2;
	public static readonly VAR=3;
	public static readonly INTLIT=4;
	public static readonly DECLIT=5;
	public static readonly PLUS=6;
	public static readonly MINUS=7;
	public static readonly ASTERISK=8;
	public static readonly DIVISION=9;
	public static readonly ASSIGN=10;
	public static readonly LPAREN=11;
	public static readonly RPAREN=12;
	public static readonly ID=13;
	public static readonly UNMATCHED=14;
	public static readonly EXTRA=2;
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE"
	];

	public static readonly ruleNames: string[] = [
		"NEWLINE", "WS", "VAR", "INTLIT", "DECLIT", "PLUS", "MINUS", "ASTERISK", 
		"DIVISION", "ASSIGN", "LPAREN", "RPAREN", "ID", "UNMATCHED"
	];

	private static readonly _LITERAL_NAMES: (string | undefined)[] = [
		undefined, undefined, undefined, "'var'", undefined, undefined, "'+'", 
		"'-'", "'*'", "'/'", "'='", "'('", "')'"
	];
	private static readonly _SYMBOLIC_NAMES: (string | undefined)[] = [
		undefined, "NEWLINE", "WS", "VAR", "INTLIT", "DECLIT", "PLUS", "MINUS", 
		"ASTERISK", "DIVISION", "ASSIGN", "LPAREN", "RPAREN", "ID", "UNMATCHED"
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SandyLexer._LITERAL_NAMES, SandyLexer._SYMBOLIC_NAMES, []);

	@Override
	@NotNull
	public get vocabulary(): Vocabulary {
		return SandyLexer.VOCABULARY;
	}


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(SandyLexer._ATN, this);
	}

	@Override
	public get grammarFileName(): string { return "SandyLexer.g4"; }

	@Override
	public get ruleNames(): string[] { return SandyLexer.ruleNames; }

	@Override
	public get serializedATN(): string { return SandyLexer._serializedATN; }

	@Override
	public get modeNames(): string[] { return SandyLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x10h\b\x01\x04"+
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04"+
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r"+
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x03\x02\x03\x02\x03\x02\x05\x02#\n\x02\x03"+
		"\x03\x06\x03&\n\x03\r\x03\x0E\x03\'\x03\x03\x03\x03\x03\x04\x03\x04\x03"+
		"\x04\x03\x04\x03\x05\x03\x05\x03\x05\x07\x053\n\x05\f\x05\x0E\x056\v\x05"+
		"\x05\x058\n\x05\x03\x06\x03\x06\x03\x06\x07\x06=\n\x06\f\x06\x0E\x06@"+
		"\v\x06\x03\x06\x03\x06\x06\x06D\n\x06\r\x06\x0E\x06E\x05\x06H\n\x06\x03"+
		"\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03"+
		"\f\x03\r\x03\r\x03\x0E\x07\x0EY\n\x0E\f\x0E\x0E\x0E\\\v\x0E\x03\x0E\x03"+
		"\x0E\x07\x0E`\n\x0E\f\x0E\x0E\x0Ec\v\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F"+
		"\x02\x02\x02\x10\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07"+
		"\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E"+
		"\x1B\x02\x0F\x1D\x02\x10\x03\x02\t\x04\x02\f\ftt\x04\x02\v\v\"\"\x03\x02"+
		"3;\x03\x022;\x03\x02aa\x03\x02c|\x06\x022;C\\aac|p\x02\x03\x03\x02\x02"+
		"\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02"+
		"\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02"+
		"\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02"+
		"\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02"+
		"\x02\x1D\x03\x02\x02\x02\x03\"\x03\x02\x02\x02\x05%\x03\x02\x02\x02\x07"+
		"+\x03\x02\x02\x02\t7\x03\x02\x02\x02\vG\x03\x02\x02\x02\rI\x03\x02\x02"+
		"\x02\x0FK\x03\x02\x02\x02\x11M\x03\x02\x02\x02\x13O\x03\x02\x02\x02\x15"+
		"Q\x03\x02\x02\x02\x17S\x03\x02\x02\x02\x19U\x03\x02\x02\x02\x1BZ\x03\x02"+
		"\x02\x02\x1Dd\x03\x02\x02\x02\x1F \x07\x0F\x02\x02 #\x07\f\x02\x02!#\t"+
		"\x02\x02\x02\"\x1F\x03\x02\x02\x02\"!\x03\x02\x02\x02#\x04\x03\x02\x02"+
		"\x02$&\t\x03\x02\x02%$\x03\x02\x02\x02&\'\x03\x02\x02\x02\'%\x03\x02\x02"+
		"\x02\'(\x03\x02\x02\x02()\x03\x02\x02\x02)*\b\x03\x02\x02*\x06\x03\x02"+
		"\x02\x02+,\x07x\x02\x02,-\x07c\x02\x02-.\x07t\x02\x02.\b\x03\x02\x02\x02"+
		"/8\x072\x02\x0204\t\x04\x02\x0213\t\x05\x02\x0221\x03\x02\x02\x0236\x03"+
		"\x02\x02\x0242\x03\x02\x02\x0245\x03\x02\x02\x0258\x03\x02\x02\x0264\x03"+
		"\x02\x02\x027/\x03\x02\x02\x0270\x03\x02\x02\x028\n\x03\x02\x02\x029H"+
		"\x072\x02\x02:>\t\x04\x02\x02;=\t\x05\x02\x02<;\x03\x02\x02\x02=@\x03"+
		"\x02\x02\x02><\x03\x02\x02\x02>?\x03\x02\x02\x02?A\x03\x02\x02\x02@>\x03"+
		"\x02\x02\x02AC\x070\x02\x02BD\t\x05\x02\x02CB\x03\x02\x02\x02DE\x03\x02"+
		"\x02\x02EC\x03\x02\x02\x02EF\x03\x02\x02\x02FH\x03\x02\x02\x02G9\x03\x02"+
		"\x02\x02G:\x03\x02\x02\x02H\f\x03\x02\x02\x02IJ\x07-\x02\x02J\x0E\x03"+
		"\x02\x02\x02KL\x07/\x02\x02L\x10\x03\x02\x02\x02MN\x07,\x02\x02N\x12\x03"+
		"\x02\x02\x02OP\x071\x02\x02P\x14\x03\x02\x02\x02QR\x07?\x02\x02R\x16\x03"+
		"\x02\x02\x02ST\x07*\x02\x02T\x18\x03\x02\x02\x02UV\x07+\x02\x02V\x1A\x03"+
		"\x02\x02\x02WY\t\x06\x02\x02XW\x03\x02\x02\x02Y\\\x03\x02\x02\x02ZX\x03"+
		"\x02\x02\x02Z[\x03\x02\x02\x02[]\x03\x02\x02\x02\\Z\x03\x02\x02\x02]a"+
		"\t\x07\x02\x02^`\t\b\x02\x02_^\x03\x02\x02\x02`c\x03\x02\x02\x02a_\x03"+
		"\x02\x02\x02ab\x03\x02\x02\x02b\x1C\x03\x02\x02\x02ca\x03\x02\x02\x02"+
		"de\v\x02\x02\x02ef\x03\x02\x02\x02fg\b\x0F\x02\x02g\x1E\x03\x02\x02\x02"+
		"\f\x02\"\'47>EGZa\x03\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SandyLexer.__ATN) {
			SandyLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SandyLexer._serializedATN));
		}

		return SandyLexer.__ATN;
	}

}

